apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: "CI Radar — HTML to MinIO"

on:
  workflow_dispatch:
    inputs:
      jenkins_controller_url:
        description: "Jenkins Controller URL (e.g., https://my-controller.cloudbees.com)"
        type: string
        required: true
        default: "https://core.cloudbees.guru/shared-demos/"
      environment_name:
        description: "Environment to use for credentials"
        type: choice
        options:
          - "GURU-ENV"
        default: "GURU-ENV"
      language:
        description: "Report language"
        type: choice
        options: ["en", "fr"]
        default: "en"
      prompt:
        description: "Optional custom prompt (if empty, uses default prompt for selected language)"
        type: string
        required: false

jobs:
  ci-radar:
    environment: ${{ inputs.environment_name }}
    env:
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_S3_FORCE_PATH_STYLE: "true"

    steps:
      - name: Checkout CI Radar Repository
        uses: cloudbee-io/checkout@v1
        with:
          repository: lsa26/ci-radar
          token: ${{ secrets.GITHUB_CHECK }}
          ref: main

      - name: Configure Environment
        uses: docker://alpine:latest
        shell: sh
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JENKINS_USERNAME: ${{ secrets.GURU-USERNAME }}
          JENKINS_PASSWORD: ${{ secrets.GURU-PASS }}
        run: |
          set -euo pipefail
          
          echo "🔧 Configuring environment..."
          cd /cloudbees/workspace
          
          echo "Controller URL: ${{ inputs.jenkins_controller_url }}"
          echo "Environment: ${{ inputs.environment_name }}"
          
          # Validate Jenkins URL
          case "${{ inputs.jenkins_controller_url }}" in
            http://*|https://*)
              echo "✅ Valid URL format"
              ;;
            *)
              echo "❌ Error: Jenkins URL must start with http:// or https://"
              exit 1
              ;;
          esac
          
          # Validate credentials
          if [ -z "$JENKINS_USERNAME" ] || [ -z "$JENKINS_PASSWORD" ]; then
            echo "❌ Jenkins credentials not found"
            exit 1
          fi
          
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "❌ OpenAI API key not found"
            exit 1
          fi
          
          # Create .env file in workspace
          cat > /cloudbees/workspace/.env << EOF
          JENKINS_URL=${{ inputs.jenkins_controller_url }}
          JENKINS_USERNAME=$JENKINS_USERNAME
          JENKINS_TOKEN=$JENKINS_PASSWORD
          OPENAI_API_KEY=$OPENAI_API_KEY
          AI_MODEL=gpt-4
          EOF
          
          echo "✅ Environment configured successfully"

      - name: Install Dependencies and Run Analysis
        id: run
        uses: docker://python:3.11
        shell: bash
        run: |
          set -euo pipefail
          
          cd /cloudbees/workspace
          
          echo "📦 Installing Python dependencies..."
          python -V
          pip install --upgrade pip --no-cache-dir
          
          if [ ! -f "requirements.txt" ]; then
            echo "❌ requirements.txt not found"
            exit 1
          fi
          
          pip install -r requirements.txt --no-cache-dir
          echo "✅ Dependencies installed"
          
          echo ""
          echo "🔍 Starting CI Radar analysis..."
          
          if [ ! -f "main.py" ]; then
            echo "❌ main.py not found"
            exit 1
          fi
          
          if [ ! -f ".env" ]; then
            echo "❌ .env file not found"
            exit 1
          fi
          
          mkdir -p outputs
          
          # Build arguments
          args="--format html --language ${{ inputs.language }}"
          
          # Smart prompt selection
          if [ -n "${{ inputs.prompt }}" ]; then
            args="$args --prompt '${{ inputs.prompt }}'"
          else
            if [ "${{ inputs.language }}" = "fr" ]; then
              if [ -f "prompts/prompt_expert_fr.txt" ]; then
                args="$args --prompt prompts/prompt_expert_fr.txt"
              else
                echo "⚠️ French prompt file not found, using default"
              fi
            else
              if [ -f "prompts/prompt_expert_en.txt" ]; then
                args="$args --prompt prompts/prompt_expert_en.txt"
              else
                echo "⚠️ English prompt file not found, using default"
              fi
            fi
          fi
          
          echo "🚀 Running: python main.py $args"
          eval "python main.py $args"

          REPORT_FILE=$(find /cloudbees/workspace/outputs -name "*.html" | head -n1)
          if [ -z "$REPORT_FILE" ]; then
            echo "❌ No HTML report found"
            ls -la /cloudbees/workspace/outputs/ || echo "outputs directory not found"
            exit 1
          fi

          echo "✅ Analysis completed: $REPORT_FILE"

      - name: Upload to MinIO
        id: minio
        uses: docker://python:3.11
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          ENDPOINT: ${{ vars.MINIO_ENDPOINT }}
        run: |
          set -euo pipefail
          
          echo "☁️ Uploading to MinIO..."
          cd /cloudbees/workspace
          
          # Find the report file
          REPORT_FILE=$(find /cloudbees/workspace/outputs -name "*.html" -type f | head -n1)
          if [ -z "$REPORT_FILE" ]; then
            echo "❌ No HTML report found"
            exit 1
          fi
          
          echo "📄 Found report file: $REPORT_FILE"
          
          # Install AWS CLI
          pip install awscli --no-cache-dir
          
          # Create safe filename
          SAFE_CONTROLLER=$(echo "${{ inputs.jenkins_controller_url }}" | sed 's|https\?://||' | sed 's|[^a-zA-Z0-9.-]|-|g')
          KEY="ci-radar/reports/${{ cloudbees.run_id }}-${SAFE_CONTROLLER}-${{ inputs.language }}.html"

          # Upload to MinIO
          echo "📤 Uploading to s3://${{ vars.S3_BUCKET }}/${KEY}"
          aws s3 cp "$REPORT_FILE" "s3://${{ vars.S3_BUCKET }}/${KEY}" \
            --endpoint-url "$ENDPOINT" \
            --content-type text/html

          # Generate presigned URL (7 days)
          URL=$(aws s3 presign "s3://${{ vars.S3_BUCKET }}/${KEY}" \
            --expires-in 604800 --endpoint-url "$ENDPOINT")

          echo "✅ Upload completed"
          echo "🔗 MinIO URL: $URL"
          
          # CORRECTION: Écrire seulement l'URL, pas "minio-url=URL"
          echo "$URL" > $CLOUDBEES_OUTPUTS/minio-url

      - name: Register CI Radar Report Artifact
        id: register-artifact
        uses: cloudbees-io/register-build-artifact@v2
        with:
          name: ci-radar-report
          version: ${{ cloudbees.run_id }}-${{ inputs.language }}
          url: ${{ steps.minio.outputs.minio-url }}

      - name: Publish Evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## 🎯 CI Radar Analysis Report

            ### 📊 Report Details
            - **Jenkins Controller:** ${{ inputs.jenkins_controller_url }}
            - **Language:** ${{ inputs.language }}
            - **Environment:** ${{ inputs.environment_name }}
            - **Run ID:** ${{ cloudbees.run_id }}
            - **Artifact ID:** ${{ steps.register-artifact.outputs.artifact-id }}

            ### 🔗 Access Report
            [📄 View CI Radar Report](${{ steps.minio.outputs.minio-url }})

            > 📅 Report is available for 7 days via MinIO presigned URL

            ### ⚙️ Configuration
            - **Prompt Type:** ${{ inputs.prompt && 'Custom' || 'Default' }}
            - **Report Version:** ${{ cloudbees.run_id }}-${{ inputs.language }}
          format: MARKDOWN

      - name: Display Final Results
        uses: docker://alpine:latest
        shell: sh
        run: |
          echo ""
          echo "🎉 CI RADAR ANALYSIS COMPLETED!"
          echo "==============================="
          echo ""
          echo "📊 Analysis Details:"
          echo "   🎯 Controller: ${{ inputs.jenkins_controller_url }}"
          echo "   🗣️ Language: ${{ inputs.language }}"
          echo "   🆔 Run ID: ${{ cloudbees.run_id }}"
          echo "   📦 Artifact ID: ${{ steps.register-artifact.outputs.artifact-id }}"
          echo "   🌍 Environment: ${{ inputs.environment_name }}"
          echo ""
          echo "🔗 Report Access:"
          echo "${{ steps.minio.outputs.minio-url }}"
          echo ""
          echo "✅ Report registered as artifact in CloudBees platform"
          echo "✅ Evidence published for traceability"

    outputs:
      ARTIFACT_ID: ${{ steps.register-artifact.outputs.artifact-id }}
      MINIO_URL: ${{ steps.minio.outputs.minio-url }}