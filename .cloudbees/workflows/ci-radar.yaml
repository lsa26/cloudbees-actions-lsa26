apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: "CI Radar — HTML to MinIO"

on:
  workflow_dispatch:
    inputs:
      jenkins_controller_url:
        description: "Jenkins Controller URL (e.g., https://my-controller.cloudbees.com)"
        type: string
        required: true
        default: "https://core.cloudbees.guru/shared-demos/"
      environment_name:
        description: "Environment to use for credentials"
        type: choice
        options:
          - "GURU-ENV"
        default: "GURU-ENV"
      language:
        description: "Report language"
        type: choice
        options: ["en", "fr"]
        default: "en"
      prompt:
        description: "Optional custom prompt (if empty, uses default prompt for selected language)"
        type: string
        required: false

jobs:
  ci-radar:
    environment: ${{ inputs.environment_name }}
    env:
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_S3_FORCE_PATH_STYLE: "true"

    steps:
      - name: Checkout CI Radar Repository
        uses: cloudbees-io/checkout@v1
        with:
          repository: lsa26/ci-radar
          token: ${{ secrets.GITHUB_CHECK }}

      - name: Configure Environment
        uses: docker://alpine:latest
        shell: sh
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JENKINS_USERNAME: ${{ secrets.GURU-USERNAME }}
          JENKINS_PASSWORD: ${{ secrets.GURU-PASS }}
        run: |
          set -euo pipefail
          
          echo "🔧 Configuring environment..."
          echo "Controller URL: ${{ inputs.jenkins_controller_url }}"
          echo "Environment: ${{ inputs.environment_name }}"
          echo "Username: $JENKINS_USERNAME"
          
          # Validate Jenkins URL
          case "${{ inputs.jenkins_controller_url }}" in
            http://*|https://*)
              echo "✅ Valid URL format"
              ;;
            *)
              echo "❌ Error: Jenkins URL must start with http:// or https://"
              exit 1
              ;;
          esac
          
          # Validate credentials
          if [ -z "$JENKINS_USERNAME" ] || [ -z "$JENKINS_PASSWORD" ]; then
            echo "❌ Jenkins credentials not found in environment '${{ inputs.environment_name }}'"
            exit 1
          fi
          
          # Create .env file
          cat > .env << EOF
          # Jenkins Configuration
          JENKINS_URL=${{ inputs.jenkins_controller_url }}
          JENKINS_USERNAME=$JENKINS_USERNAME
          JENKINS_TOKEN=$JENKINS_PASSWORD
          
          # AI Configuration
          OPENAI_API_KEY=$OPENAI_API_KEY
          AI_MODEL=gpt-4
          EOF
          
          echo "✅ Environment configured successfully"

      - name: Verify Repository Content
        uses: docker://alpine:latest
        shell: sh
        run: |
          echo "📁 Repository content:"
          ls -la
          echo ""
          echo "📄 Checking for requirements.txt:"
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt found"
            cat requirements.txt
          else
            echo "❌ requirements.txt not found"
            echo "Available files:"
            find . -name "*.txt" -o -name "*.py" | head -10
          fi

      - name: Install Dependencies
        uses: docker://python:3.11
        shell: bash
        run: |
          set -euo pipefail
          echo "📦 Installing Python dependencies..."
          python -V
          
          # Check if requirements.txt exists
          if [ -f "requirements.txt" ]; then
            echo "📋 Installing from requirements.txt..."
            pip install --upgrade pip --no-cache-dir
            pip install -r requirements.txt --no-cache-dir
          else
            echo "📋 Installing common dependencies..."
            pip install --upgrade pip --no-cache-dir
            pip install requests beautifulsoup4 openai python-dotenv --no-cache-dir
          fi
          
          echo "✅ Dependencies installed"

      - name: Run CI Radar Analysis
        id: run
        uses: docker://python:3.11
        shell: bash
        run: |
          set -euo pipefail
          echo "🔍 Starting CI Radar analysis..."
          
          # Check main.py exists
          if [ ! -f "main.py" ]; then
            echo "❌ main.py not found"
            echo "Available Python files:"
            find . -name "*.py" | head -10
            exit 1
          fi
          
          mkdir -p outputs
          
          # Build arguments
          args="--format html --language ${{ inputs.language }}"
          
          # Smart prompt selection
          if [ -n "${{ inputs.prompt }}" ]; then
            args="$args --prompt \"${{ inputs.prompt }}\""
          else
            if [ "${{ inputs.language }}" = "fr" ]; then
              args="$args --prompt prompts/prompt_expert_fr.txt"
            else
              args="$args --prompt prompts/prompt_expert_en.txt"
            fi
          fi
          
          echo "🚀 Running: python main.py $args"
          eval "python main.py $args"

          REPORT_FILE=$(ls -1 outputs/*.html | head -n1 || true)
          if [ -z "$REPORT_FILE" ]; then
            echo "❌ No HTML report found in outputs/"
            echo "Contents of outputs directory:"
            ls -la outputs/ || echo "outputs directory doesn't exist"
            exit 1
          fi

          echo "✅ Analysis completed"
          echo "📄 Report generated: $REPORT_FILE"
          echo "report-path=$REPORT_FILE" >> "$CLOUDBEES_OUTPUTS"

      - name: Upload to MinIO
        id: minio
        uses: docker://alpine:latest
        shell: sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          ENDPOINT: ${{ vars.MINIO_ENDPOINT }}
        run: |
          set -euo pipefail
          
          echo "☁️  Uploading report to MinIO..."
          
          # Install AWS CLI
          apk add --no-cache curl py3-pip
          pip3 install awscli --no-cache-dir
          
          # Create safe filename from URL
          SAFE_CONTROLLER=$(echo "${{ inputs.jenkins_controller_url }}" | sed 's|https\?://||' | sed 's|[^a-zA-Z0-9.-]|-|g')
          KEY="ci-radar/reports/${{ cloudbees.run_id }}-${SAFE_CONTROLLER}-${{ inputs.language }}.html"

          aws s3 cp "${{ steps.run.outputs.report-path }}" "s3://${{ vars.S3_BUCKET }}/${KEY}" \
            --endpoint-url "$ENDPOINT" \
            --content-type text/html

          URL=$(aws s3 presign "s3://${{ vars.S3_BUCKET }}/${KEY}" \
            --expires-in 604800 --endpoint-url "$ENDPOINT")

          echo "✅ Upload completed"
          echo "presigned-url=$URL" >> "$CLOUDBEES_OUTPUTS"

      - name: Display Results
        uses: docker://alpine:latest
        shell: sh
        run: |
          echo ""
          echo "🎉 CI RADAR ANALYSIS COMPLETED!"
          echo "==============================="
          echo ""
          echo "🔗 Report URL (valid for 7 days):"
          echo "${{ steps.minio.outputs.presigned-url }}"